#include-once

Global $_MDCodeBuffer, $_MDLoadOffset, $_MDGetOffset, $_MDFreeOffset
Global $_MFHookPtr, $_MFHookBak, $_MFHookApi = "LocalCompact"

Func _TabControl($Hwnd, $Type)
	Switch $Type
		Case 0
			$Type = "DeleteTab"
		Case 1
			$Type = "AddTab"
		Case 2
			$Type = "ActivateTab"
		Case Else
			Return 0
	EndSwitch
	$ITaskbarList = "ptr lpVtbl"
	$ITaskbarListVtbl = "ptr QueryInterface; ptr AddRef; ptr Release; ptr HrInit; ptr AddTab; ptr DeleteTab; ptr ActivateTab; ptr SetActiveAlt"
	$HRESULT = "LONG"
	$OLE32 = DllOpen("ole32.dll")
	$CLSCTX_SERVER = BitOR(1, 4)
	$IID_ITaskbarList = _GUIDStruct("{56FDF342-FD6D-11d0-958A-006097C9A090}")
	$CLSID_TaskBarlist = _GUIDStruct("56FDF344-FD6D-11D0-958A006097C9A090")
	DllCall($OLE32, "long", "CoInitialize", "ptr", 0)
	$ret = DllCall($OLE32, "long_ptr", "CoCreateInstance", "ptr", DllStructGetPtr($CLSID_TaskBarlist), "ptr", 0, "dword", $CLSCTX_SERVER, "ptr", DllStructGetPtr($IID_ITaskbarList), "ptr*", 0)
	$lpITaskbarList = $ret[5]
	$COM_Interface_ITaskbarList = DllStructCreate("ptr lpVtbl", $lpITaskbarList)
	$COM_Interface_ITaskbarList_FunctionTable = DllStructCreate($ITaskbarListVtbl, DllStructGetData($COM_Interface_ITaskbarList, 1))
	MemoryFuncInit()
	MemoryFuncCall($HRESULT, DllStructGetData($COM_Interface_ITaskbarList_FunctionTable, "HrInit"), "ptr", $lpITaskbarList)
	MemoryFuncCall($HRESULT, DllStructGetData($COM_Interface_ITaskbarList_FunctionTable, $Type), "ptr", $lpITaskbarList, "hwnd", $hwnd)
	MemoryFuncCall($HRESULT, DllStructGetData($COM_Interface_ITaskbarList_FunctionTable, "Release"), "ptr", $lpITaskbarList)
	MemoryFuncExit()
	DllCall($OLE32, "long", "CoUninitialize")
	DllClose($OLE32)
	Return 1
EndFunc   ;==>_HideTab

Func _GUIDStruct($IID)
	$IID = StringRegExpReplace($IID, "([}{])", "")
	$IID = StringSplit($IID, "-")
	Local $_GUID = "DWORD Data1;  ushort Data2;  ushort Data3;  BYTE Data4[8];"
	Local $GUID = DllStructCreate($_GUID)
	If $IID[0] = 5 Then $IID[4] &= $IID[5]
	If $IID[0] > 5 Or $IID[0] < 4 Then Return SetError(1, 0, 0)
	DllStructSetData($GUID, 1, Dec($IID[1]))
	DllStructSetData($GUID, 2, Dec($IID[2]))
	DllStructSetData($GUID, 3, Dec($IID[3]))
	DllStructSetData($GUID, 4, Binary("0x" & $IID[4]))
	Return $GUID
EndFunc   ;==>_GUIDStruct

Func MemoryFuncInit()
	Local $KernelHandle = DllCall("kernel32.dll", "ptr", "LoadLibrary", "str", "kernel32.dll")
	Local $HookPtr = DllCall("kernel32.dll", "ptr", "GetProcAddress", "ptr", $KernelHandle[0], "str", $_MFHookApi)
	$_MFHookPtr = $HookPtr[0]

	$_MFHookBak = DllStructCreate("ubyte[7]")
	DllCall("kernel32.dll", "int", "WriteProcessMemory", "ptr", -1, "ptr", DllStructGetPtr($_MFHookBak), "ptr", $_MFHookPtr, "uint", 7, "uint*", 0)

	DllCall("kernel32.dll", "int", "WriteProcessMemory", "ptr", -1, "ptr", $_MFHookPtr, "byte*", 0xB8, "uint", 1, "uint*", 0)
	DllCall("kernel32.dll", "int", "WriteProcessMemory", "ptr", -1, "ptr", $_MFHookPtr + 5, "ushort*", 0xE0FF, "uint", 2, "uint*", 0)
EndFunc

Func MemoryFuncCall($RetType, $Address, $Type1 = "", $Param1 = 0, $Type2 = "", $Param2 = 0, $Type3 = "", $Param3 = 0, $Type4 = "", $Param4 = 0, $Type5 = "", $Param5 = 0, $Type6 = "", $Param6 = 0, $Type7 = "", $Param7 = 0, $Type8 = "", $Param8 = 0, $Type9 = "", $Param9 = 0, $Type10 = "", $Param10 = 0, $Type11 = "", $Param11 = 0, $Type12 = "", $Param12 = 0, $Type13 = "", $Param13 = 0, $Type14 = "", $Param14 = 0, $Type15 = "", $Param15 = 0, $Type16 = "", $Param16 = 0, $Type17 = "", $Param17 = 0, $Type18 = "", $Param18 = 0, $Type19 = "", $Param19 = 0, $Type20 = "", $Param20 = 0)
	If Not IsDllStruct($_MFHookBak) Then MemoryFuncInit()

	MemoryFuncSet($Address)
	Local $DllCallStr = 'DllCall("kernel32.dll", "' & $RetType & '", "' & $_MFHookApi & '"', $n, $i
	For $i = 4 To @NumParams Step 2
		$n = ($i - 2) / 2
		$DllCallStr &= ', $Type' & $n & ', $Param' & $n
	Next
	$DllCallStr &= ')'
	Local $Ret = Execute($DllCallStr)
	Return $Ret
EndFunc

Func MemoryFuncSet($Address)
	DllCall("kernel32.dll", "int", "WriteProcessMemory", "ptr", -1, "ptr", $_MFHookPtr + 1, "uint*", $Address, "uint", 4, "uint*", 0)
EndFunc

Func MemoryFuncExit()
	DllCall("kernel32.dll", "int", "WriteProcessMemory", "ptr", -1, "ptr", $_MFHookPtr, "ptr", DllStructGetPtr($_MFHookBak), "uint", 7, "uint*", 0)
	$_MFHookBak = 0
EndFunc

Func MemoryDllInit()
	If IsDllStruct($_MDCodeBuffer) Then Return

	Local $Opcode = '0x
		$Opcode
		$Opcode
		$Opcode
		$Opcode

	$_MDLoadOffset = (StringInStr($Opcode, "59585A51") - 1) / 2 - 1
	$_MDGetOffset = (StringInStr($Opcode, "5990585A51") - 1) / 2 - 1
	$_MDFreeOffset = (StringInStr($Opcode, "5A585250") - 1) / 2 - 1

	$_MDCodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]")
	DllStructSetData($_MDCodeBuffer, 1, $Opcode)

	If Not IsDllStruct($_MFHookBak) Then MemoryFuncInit()
EndFunc

Func MemoryDllExit()
	MemoryFuncExit()
	$_MDCodeBuffer = 0
EndFunc

Func MemoryDllOpen($DllBinary)
	If Not IsDllStruct($_MDCodeBuffer) Then MemoryDllInit()

	Local $Ret = DllCall("kernel32.dll", "hwnd", "LoadLibraryA", "str", "kernel32.dll")
	Local $GetProcAddress = DllCall("kernel32.dll", "uint", "GetProcAddress", "hwnd", $Ret[0], "str", "GetProcAddress")
	Local $LoadLibraryA = DllCall("kernel32.dll", "uint", "GetProcAddress", "hwnd", $Ret[0], "str", "LoadLibraryA")

	Local $DllBuffer = DllStructCreate("byte[" & BinaryLen($DllBinary) & "]")
	DllStructSetData($DllBuffer, 1, $DllBinary)

	MemoryFuncSet(DllStructGetPtr($_MDCodeBuffer) + $_MDLoadOffset)
	Local $Module = DllCall("kernel32.dll", "uint", $_MFHookApi, "uint", $LoadLibraryA[0], "uint", $GetProcAddress[0], "ptr", DllStructGetPtr($DllBuffer))

	$DllBuffer = 0
	Return $Module[0]
EndFunc

Func MemoryDllClose($Module)
	MemoryFuncSet(DllStructGetPtr($_MDCodeBuffer) + $_MDFreeOffset)
	DllCall("kernel32.dll", "none", $_MFHookApi, "uint", $Module)
EndFunc

Func MemoryDllCall($Module, $RetType, $Funcname, $Type1 = "", $Param1 = 0, $Type2 = "", $Param2 = 0, $Type3 = "", $Param3 = 0, $Type4 = "", $Param4 = 0, $Type5 = "", $Param5 = 0, $Type6 = "", $Param6 = 0, $Type7 = "", $Param7 = 0, $Type8 = "", $Param8 = 0, $Type9 = "", $Param9 = 0, $Type10 = "", $Param10 = 0, $Type11 = "", $Param11 = 0, $Type12 = "", $Param12 = 0, $Type13 = "", $Param13 = 0, $Type14 = "", $Param14 = 0, $Type15 = "", $Param15 = 0, $Type16 = "", $Param16 = 0, $Type17 = "", $Param17 = 0, $Type18 = "", $Param18 = 0, $Type19 = "", $Param19 = 0, $Type20 = "", $Param20 = 0)
	Local $Ret, $OpenFlag = False
	Local Const $MaxParams = 20
	If (@NumParams < 3) Or (@NumParams > $MaxParams * 2 + 3) Or (Mod(@NumParams, 2) = 0) Then
		SetError(2)
		Return 0
	EndIf

	If Not IsNumber($Module) Then
		$OpenFlag = True
		$Module = MemoryDllOpen($Module)
	EndIf

	If $Module = 0 Then
		If $OpenFlag Then MemoryDllClose($Module)
		SetError(1)
		Return 0
	EndIf

	MemoryFuncSet(DllStructGetPtr($_MDCodeBuffer) + $_MDGetOffset)
	$Ret = DllCall("kernel32.dll", "uint", $_MFHookApi, "uint", $Module, "str", $Funcname)
	If $Ret[0] = 0 Then	
		SetError(3)
		Return 0
	EndIf

	MemoryFuncSet($Ret[0])
	Local $DllCallStr = 'DllCall("kernel32.dll", "' & $RetType & '", "' & $_MFHookApi & '"', $n, $i
	For $i = 5 To @NumParams Step 2
		$n = ($i - 3) / 2
		$DllCallStr &= ', $Type' & $n & ', $Param' & $n
	Next
	$DllCallStr &= ')'
	$Ret = Execute($DllCallStr)

	If $OpenFlag Then MemoryDllClose($Module)
	SetError(0)
	Return $Ret
EndFunc