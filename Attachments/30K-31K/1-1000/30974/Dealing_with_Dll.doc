{\rtf1\ansi\ansicpg1252\uc2 \deff0
\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}}
{\colortbl;\red0\green0\blue0;\red54\green95\blue145;\red0\green0\blue255;\red128\green0\blue128;}
{\info{\author hellopdf.com Inc}{\operator hellopdf.com Inc}
{\creatim\yr2007\mo12\dy11\hr12\min0}
{\revtim\yr2007\mo12\dy11\hr12\min0}{\version4}
{\edmins15}{\nofpages10}{\nofwords0}{\nofchars0}{\vern77}}
\paperw15225\paperh25920
\margl0\margr0\margt0\margb0
\viewkind1\viewscale100
\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx4683\posy2148\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch Dealing with Dlls in AutoIt}\b0\par}{\pard \qj\phpg\pvpg\posx5706\posy3455\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch Table of Contents}\b0\par}{\pard \qj\phpg\pvpg\posx1892\posy4260\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch Introduction}\par}{\pard \qj\phpg\pvpg\posx3327\posy4260\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch ............................................................................................................................................. 2}\par}{\pard \qj\phpg\pvpg\posx1892\posy4799\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch Data Types ............................................................................................................................................... 3}\par}{\pard \qj\phpg\pvpg\posx1892\posy5311\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch My First DllCall() ...................................................................................................................................... 4}\par}{\pard \qj\phpg\pvpg\posx1892\posy5822\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch Strings in DllCall() .................................................................................................................................... 6}\par}{\pard \qj\phpg\pvpg\posx1892\posy6360\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch Passing a parameter as a reference ........................................................................................................ 7}\par}{\pard \qj\phpg\pvpg\posx1892\posy6872\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch A word about calling conventions ........................................................................................................... 8}\par}{\pard \qj\phpg\pvpg\posx1892\posy7409\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch DllStructs – Hell yeah! ............................................................................................................................. 9}\par}{\pard \qj\phpg\pvpg\posx6193\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | Dealing with Dlls in AutoIt}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 1}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx6270\posy1535\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch Introduction}\b0\par}{\pard \qj\phpg\pvpg\posx1919\posy2328\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Welcome to this tutorial about using the various Dll* functions in AutoIt. These functions are}\par}{\pard \qj\phpg\pvpg\posx1892\posy2763\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch very powerful and are one of utoIt’s greatest features since it allows you to do almost}\par}{\pard \qj\phpg\pvpg\posx1919\posy3199\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch anything in AutoIt. Some of the things that can be done are direct access to the Windows}\par}{\pard \qj\phpg\pvpg\posx1919\posy3633\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch API, 3D programming, direct memory access and much more.}\par}{\pard \qj\phpg\pvpg\posx1919\posy4324\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch This tutorial is meant to give you the basic knowledge and understanding to write function}\par}{\pard \qj\phpg\pvpg\posx1919\posy4735\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch that uses Dll* function and will most likely give you a much better understanding of}\par}{\pard \qj\phpg\pvpg\posx1919\posy5169\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch programming in general.}\par}{\pard \qj\phpg\pvpg\posx1919\posy5860\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Each chapter is divided in 3 parts, theory, example code & exercises.}\par}{\pard \qj\phpg\pvpg\posx2072\posy6552\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch ll of the coding in this tutorial is using standard windows dll’s and information from}\par}{\pard \qj\phpg\pvpg\posx1892\posy6961\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Microsoft’s documentation site}\par}{\pard \qj\phpg\pvpg\posx5912\posy6986\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch msdn}\par}{\pard \qj\phpg\pvpg\posx6577\posy6986\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch .}\par}{\pard \qj\phpg\pvpg\posx1919\posy7678\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Good Luck!}\par}{\pard \qj\phpg\pvpg\posx7729\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | Introduction}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 2}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx6449\posy1535\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch Data Types}\b0\par}{\pard \qj\phpg\pvpg\posx1919\posy2328\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch First of all, if you have any experience of any language that uses specific types for data you}\par}{\pard \qj\phpg\pvpg\posx1919\posy2763\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch can skip this chapter completely.}\par}{\pard \qj\phpg\pvpg\posx1919\posy3455\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch So what is a data type? A data type is a specific format that data is stored in. In AutoIt there}\par}{\pard \qj\phpg\pvpg\posx1919\posy3889\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch is only one data type, the variant. The variant can store all kind of stuff, numbers, strings,}\par}{\pard \qj\phpg\pvpg\posx1919\posy4324\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch handles etc. This is not the case however in most languages, and you have to specify what}\par}{\pard \qj\phpg\pvpg\posx1892\posy4735\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch you’re going to store in the variable}\par}{\pard \qj\phpg\pvpg\posx1892\posy5425\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch For example in C/C++ you use the ‘int’ keyword to create a variable that can store an integer}\par}{\pard \qj\phpg\pvpg\posx1919\posy5860\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch and not only that, it is limited to hold only four bytes as well. ‘float’ is also a widely used type}\par}{\pard \qj\phpg\pvpg\posx1919\posy6296\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch as it is the standard way to create floating point numbers.}\par}{\pard \qj\phpg\pvpg\posx1919\posy6986\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Strings however is not that easy in type specific languages. First of all there is a type for}\par}{\pard \qj\phpg\pvpg\posx12873\posy6986\dfrmtxtx0\dfrmtxty0{\b\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch one}\b0\par}{\pard \qj\phpg\pvpg\posx1919\posy7422\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch character, it is simply named char (or wchar_t when dealing with Unicode). But since it is}\par}{\pard \qj\phpg\pvpg\posx1919\posy7857\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch only made for one char it’s not possible to store entire strings in them So what’s the}\par}{\pard \qj\phpg\pvpg\posx1919\posy8266\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch solution? To create an array of chars and put a NULL char (ASCII 0) in the last element to}\par}{\pard \qj\phpg\pvpg\posx1892\posy8702\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch specify that the string ends there s you can imagine it’s not very pleasant to work with this}\par}{\pard \qj\phpg\pvpg\posx1892\posy9136\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch kind of stuff, and that’s one of the best reasons to use a type -less language (like AutoIt) to}\par}{\pard \qj\phpg\pvpg\posx1919\posy9571\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch work with strings. However when dealing with dlls, this is something we must have in mind.}\par}{\pard \qj\phpg\pvpg\posx1919\posy10263\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch For more information on what types AutoIt supports and what C/C++ supports check the}\par}{\pard \qj\phpg\pvpg\posx1919\posy10698\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch AutoIt help file under DllCall() and this link:}\par}{\pard \qj\phpg\pvpg\posx1919\posy11389\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch http://www.cplusplus.com/doc/tutorial/variables.html}\par}{\pard \qj\phpg\pvpg\posx1892\posy12055\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch That’s it for now Don’t worry about it if you don’t get it It won’t be terrible important to}\par}{\pard \qj\phpg\pvpg\posx1919\posy12489\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch understand this in details until you begin working with advanced structs.}\par}{\pard \qj\phpg\pvpg\posx1919\posy13181\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Time for the first DllCall()!}\par}{\pard \qj\phpg\pvpg\posx7882\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | Data Types}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 3}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx5758\posy1892\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch My First DllCall()}\b0\par}{\pard \qj\phpg\pvpg\posx1892\posy2687\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch The first function we’re going to look at is the Sleep( ) function, which resides in Kernel32.dll.}\par}{\pard \qj\phpg\pvpg\posx1892\posy3122\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch This is the exact same function that is being called when you write Sleep(100) in utoIt, it’s}\par}{\pard \qj\phpg\pvpg\posx1892\posy3531\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch just that utoIt acts a layer between you and the function Here’s the documentation of the}\par}{\pard \qj\phpg\pvpg\posx1919\posy3992\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch function:}\par}{\pard \qj\phpg\pvpg\posx3122\posy3992\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch http://msdn.microsoft.com/en-us/library/ms686298(VS.85).aspx}\par}{\pard \qj\phpg\pvpg\posx1919\posy4683\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch As you could see when reading the documentation Sleep has got 1 parameter and does not}\par}{\pard \qj\phpg\pvpg\posx1919\posy5092\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch return any value. Now, let’s check the syntax of the AutoIt function DllCall():}\par}{\pard \qj\phpg\pvpg\posx1892\posy5796\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch DllCall ( "dll", "return type", "function" [, "type1", param1 [, "type n", param n]] )}\par}{\pard \qj\phpg\pvpg\posx1867\posy6436\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch Let’s step through all the parameters, one at a time First we have “dll”, this is the dll file that the}\par}{\pard \qj\phpg\pvpg\posx1892\posy6846\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch function is in. As I said before and as the documentation specified the dll is named “Kernel32 dll”,}\par}{\pard \qj\phpg\pvpg\posx1892\posy7255\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch just put that in there.}\par}{\pard \qj\phpg\pvpg\posx1867\posy7895\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch Second is the return type MSDN said that there was no return so put in “none” there ( utoIt version}\par}{\pard \qj\phpg\pvpg\posx1867\posy8279\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch of void) Next shouldn’t be too hard, we know the name of the function, that’s right, Sleep. Just put it}\par}{\pard \qj\phpg\pvpg\posx1892\posy8689\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch in there as well.}\par}{\pard \qj\phpg\pvpg\posx1892\posy9328\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch Moving on to the parameter. As you can see the first thing you need to specify is the type of the}\par}{\pard \qj\phpg\pvpg\posx12489\posy9726\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch . So put}\par}{\pard \qj\phpg\pvpg\posx1867\posy9738\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch parameter This is called “DWORD” on the msdn page and is in utoIt called simply “dword”}\par}{\pard \qj\phpg\pvpg\posx1892\posy10135\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch in “dword” in the “type 1” parameter The parameter’s type is specified so in “param1” you}\par}{\pard \qj\phpg\pvpg\posx1919\posy10595\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch can specify what value you want it to sleep here.}\par}{\pard \qj\phpg\pvpg\posx1919\posy11261\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch There should be no more parameters in the DllCall() now, if the Sleep function had more}\par}{\pard \qj\phpg\pvpg\posx1919\posy11696\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch parameters you should repeat the last time x amount of times. DllCall is so cool that it has}\par}{\pard \qj\phpg\pvpg\posx1919\posy12131\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch optional amount of parameters.}\par}{\pard \qj\phpg\pvpg\posx1919\posy12822\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch If there would have been any returned data it would be in an array, so the data in the first}\par}{\pard \qj\phpg\pvpg\posx1919\posy13257\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch element ([0]) would have been the data returned from the dll.}\par}{\pard \qj\phpg\pvpg\posx1892\posy13922\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Hopefully you got some working code by now, but don’t despair if you don’t here’s the}\par}{\pard \qj\phpg\pvpg\posx1919\posy14384\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch working version!}\par}{\pard \qj\phpg\pvpg\posx1919\posy15074\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch ; Sleeps for 1 second}\par}{\pard \qj\phpg\pvpg\posx1919\posy15458\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch DllCall("Kernel32.dll","none","Sleep","dword",1000)}\par}{\pard \qj\phpg\pvpg\posx1919\posy16534\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Hopefully you got it now!}\par}{\pard \qj\phpg\pvpg\posx1919\posy17199\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Before finish this lesson you should make sure you can implement these functions by}\par}{\pard \qj\phpg\pvpg\posx1919\posy17634\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch yourself!}\par}{\pard \qj\phpg\pvpg\posx1919\posy18351\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch LockWorkStation}\par}{\pard \qj\phpg\pvpg\posx4043\posy18351\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch –  Tip! BOOL is an int and when there are no parameters you completely}\par}{\pard \qj\phpg\pvpg\posx1919\posy18785\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch skip the parameter section of DllCall.}\par}{\pard \qj\phpg\pvpg\posx7267\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | My First DllCall()}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 4}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx1919\posy1663\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch GetCurrentProcessId}\par}{\pard \qj\phpg\pvpg\posx4504\posy1663\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch –  Tip! The returned data is returned as an array where array[0] is the}\par}{\pard \qj\phpg\pvpg\posx1919\posy2098\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch returned data}\par}{\pard \qj\phpg\pvpg\posx7267\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | My First DllCall()}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 5}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx5604\posy2584\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch Strings in DllCall()}\b0\par}{\pard \qj\phpg\pvpg\posx1919\posy3378\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch As you should know strings in dlls are in fact arrays of chars, fortunately AutoIt helps us with}\par}{\pard \qj\phpg\pvpg\posx1892\posy3787\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch passing this so all you have to do is to choose “str” or “wstr” and then just put in your string}\par}{\pard \qj\phpg\pvpg\posx1919\posy4248\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch in the paramx param in DllCall(). A very important thing to remember here is that since}\par}{\pard \qj\phpg\pvpg\posx1919\posy4683\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch windows was not fully Unicode until win2000 almost all function that deals with strings is}\par}{\pard \qj\phpg\pvpg\posx1892\posy5092\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch implemented in two versions They usually have an ‘ ’ or a ‘W’ in the end of its name, like}\par}{\pard \qj\phpg\pvpg\posx1892\posy5528\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch this “MyStringFunction ”, where stands for ANSI and W stands for wide char, aka Unicode.}\par}{\pard \qj\phpg\pvpg\posx1892\posy6218\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Now let’s look at this lesson’s Dll function}\par}{\pard \qj\phpg\pvpg\posx7242\posy6218\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch MessageBox}\par}{\pard \qj\phpg\pvpg\posx8803\posy6218\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch , yes its good ol’ MessageBox that is}\par}{\pard \qj\phpg\pvpg\posx1919\posy6654\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch also included in autoit.}\par}{\pard \qj\phpg\pvpg\posx1919\posy7345\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch As you can see there are different flags that you can specify here and unfortunate msdn only}\par}{\pard \qj\phpg\pvpg\posx1919\posy7779\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch specifies the symbol name of them, which means that the different names you see there}\par}{\pard \qj\phpg\pvpg\posx1919\posy8215\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch actually is actually a number. To find this value try Google the name or look it up in some}\par}{\pard \qj\phpg\pvpg\posx1919\posy8625\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch version of the winapi language extensions (like windows.h for C/C++).}\par}{\pard \qj\phpg\pvpg\posx1892\posy9315\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch For this time being we use 0 for “uType”}\par}{\pard \qj\phpg\pvpg\posx1892\posy10007\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Here’s the source code for this lesson. Study it and change stuff in it. For example try}\par}{\pard \qj\phpg\pvpg\posx1919\posy10442\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch changing uType to 16.}\par}{\pard \qj\phpg\pvpg\posx1919\posy11133\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch ; We call MessageBoxW because we want unicode, which means we have to use wstr}\par}{\pard \qj\phpg\pvpg\posx1919\posy11517\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch ; hwnd is 0 because we don't have a window to be the owner of the messagebox}\par}{\pard \qj\phpg\pvpg\posx1919\posy11901\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch DllCall("user32.dll","int","MessageBoxW","hwnd",0,"wstr","Hello from Dll}\par}{\pard \qj\phpg\pvpg\posx1919\posy12259\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch tutorial!","wstr","Info","uint",0)}\par}{\pard \qj\phpg\pvpg\posx1892\posy13334\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch That’s it! Study it and don’t move on until you finish  these exercises:}\par}{\pard \qj\phpg\pvpg\posx1919\posy14050\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Change the code to use the ASCII version instead}\par}{\pard \qj\phpg\pvpg\posx1919\posy14486\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Implement}\par}{\pard \qj\phpg\pvpg\posx3352\posy14486\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch FindWindow}\par}{\pard \qj\phpg\pvpg\posx7140\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | Strings in DllCall()}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 6}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx3659\posy1535\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch Passing a parameter as a reference}\b0\par}{\pard \qj\phpg\pvpg\posx1919\posy2328\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch If have ever seen the AutoIt keyword “ByRef” in a function declaration you will know how}\par}{\pard \qj\phpg\pvpg\posx1919\posy2763\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch this works. Basically it means that you send a value to the dll and the dll modifies it for you.}\par}{\pard \qj\phpg\pvpg\posx1919\posy3199\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch This is useful if the dll wants to signalize its success through the return value but still give}\par}{\pard \qj\phpg\pvpg\posx1919\posy3633\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch back values to the caller.}\par}{\pard \qj\phpg\pvpg\posx1919\posy4068\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch A sample function from windows that uses it is}\par}{\pard \qj\phpg\pvpg\posx7806\posy4068\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch GetDiskFreeSpace}\par}{\pard \qj\phpg\pvpg\posx10058\posy4068\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch .}\par}{\pard \qj\phpg\pvpg\posx1892\posy4479\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch To pass a parameter as reference, just add a ‘*’ to the parameters type}\par}{\pard \qj\phpg\pvpg\posx1892\posy4913\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Here’s how the function is impl emented:}\par}{\pard \qj\phpg\pvpg\posx1919\posy5630\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch ; Variables to pass as reference}\par}{\pard \qj\phpg\pvpg\posx1919\posy5988\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Local $SectorsPerCluster}\par}{\pard \qj\phpg\pvpg\posx1919\posy6372\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Local $BytesPerSector}\par}{\pard \qj\phpg\pvpg\posx1919\posy6756\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Local $NumberOfFreeClusters}\par}{\pard \qj\phpg\pvpg\posx1919\posy7114\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Local $TotalNumberOfClusters}\par}{\pard \qj\phpg\pvpg\posx1919\posy7882\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch $calldata=DllCall("Kernel32.dll","int","GetDiskFreeSpaceW","wstr","C:\\","dword*",$SectorsP}\par}{\pard \qj\phpg\pvpg\posx1919\posy8241\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch erCluster,"dword*",$BytesPerSector,"dword*",$NumberOfFreeClusters,"dword*",$TotalNu}\par}{\pard \qj\phpg\pvpg\posx1919\posy8625\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch mberOfClusters)}\par}{\pard \qj\phpg\pvpg\posx1919\posy9367\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch ; The data is returned as an array, even the changed values of the variables}\par}{\pard \qj\phpg\pvpg\posx1919\posy9751\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch $SectorsPerCluster=$calldata[2]}\par}{\pard \qj\phpg\pvpg\posx1919\posy10110\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch $BytesPerSector=$calldata[3]}\par}{\pard \qj\phpg\pvpg\posx1919\posy10494\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch $NumberOfFreeClusters=$calldata[4]}\par}{\pard \qj\phpg\pvpg\posx1919\posy10877\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch $TotalNumberOfClusters=$calldata[5]}\par}{\pard \qj\phpg\pvpg\posx1919\posy12003\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch MsgBox(0,"","Total number of clusters: "&$TotalNumberOfClusters)}\par}{\pard \qj\phpg\pvpg\posx1919\posy13282\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch As you can see all data is in the array, and the variables are not actually modified. You will}\par}{\pard \qj\phpg\pvpg\posx1919\posy13718\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch have to overwrite their values to the ones in the array if you want the actual values changed.}\par}{\pard \qj\phpg\pvpg\posx1892\posy15074\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch That’s all for this chapter, I couldn’t find any appropriate exercises so make sure the above}\par}{\pard \qj\phpg\pvpg\posx1919\posy15535\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch example is clear as water.}\par}{\pard \qj\phpg\pvpg\posx5144\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | Passing a parameter as a reference}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 7}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx3864\posy1535\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch A word about calling conventions}\b0\par}{\pard \qj\phpg\pvpg\posx1919\posy2328\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch A final word when it comes to DllCall is calling conventions. A calling convention is a set of}\par}{\pard \qj\phpg\pvpg\posx1919\posy2763\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch rules about how the calling of a function should be done. All windows dlls uses the stdcall}\par}{\pard \qj\phpg\pvpg\posx1919\posy3199\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch calling convention and it is also the standard mode in autoit. However a calling convention}\par}{\pard \qj\phpg\pvpg\posx1892\posy3608\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch called “cdecl” is pretty poular as well and switching to it in autoit is simple Just put cdecl}\par}{\pard \qj\phpg\pvpg\posx1919\posy4068\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch after the return type. So:}\par}{\pard \qj\phpg\pvpg\posx2098\posy4875\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch ; With stdcall}\par}{\pard \qj\phpg\pvpg\posx2098\posy5259\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch DllCall(”SomeDll dll”,”int”,”Func”)}\par}{\pard \qj\phpg\pvpg\posx1919\posy6116\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Becomes:}\par}{\pard \qj\phpg\pvpg\posx2098\posy6769\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch ; With cdecl}\par}{\pard \qj\phpg\pvpg\posx2098\posy7153\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch DllCall(”SomeDll dll”,”int cdecl”,”Func”)}\par}{\pard \qj\phpg\pvpg\posx5348\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | A word about calling conventions}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 8}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx5169\posy1535\dfrmtxtx0\dfrmtxty0{\b\cf2\f0\fs50\expnd5\expndtw-1\kerning0\loch DllStructs – Hell yeah!}\b0\par}{\pard \qj\phpg\pvpg\posx1919\posy2328\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch It’s now time to start with the really important and useful stuff, DllStructs, so what is a}\par}{\pard \qj\phpg\pvpg\posx1919\posy2763\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch DllStruct? Try to think of them as packets of data where all the variables lies next to}\par}{\pard \qj\phpg\pvpg\posx1919\posy3199\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch eachother in memory.}\par}{\pard \qj\phpg\pvpg\posx1919\posy3889\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch So why do we need them? Couldn’t we just pass all the data as parameters to the function?}\par}{\pard \qj\phpg\pvpg\posx1919\posy4324\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch In some situations, yes, we could. But in most situations this is just stupid and sometimes the}\par}{\pard \qj\phpg\pvpg\posx1919\posy4735\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch size of the data could vary and then it would create unnecessary long and complicated code.}\par}{\pard \qj\phpg\pvpg\posx1919\posy5169\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch It’s also necessary when the function want to return many values, in this case it could return}\par}{\pard \qj\phpg\pvpg\posx1919\posy5604\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch a pointer (memory address) to a struct that contains lots of variables (or members as I will}\par}{\pard \qj\phpg\pvpg\posx1919\posy6040\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch refer them as from now on). Another way would be to pass a pointer to a struct as a}\par}{\pard \qj\phpg\pvpg\posx1919\posy6474\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch parameter to the function and let it modify the struct that it points to.}\par}{\pard \qj\phpg\pvpg\posx1919\posy7166\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Another good thing about is that it allows direct memory access in AutoIt. This is not terrible}\par}{\pard \qj\phpg\pvpg\posx1919\posy7601\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch useful, but when you work with advanced low-level (relative lov-level) code you’ll see that}\par}{\pard \qj\phpg\pvpg\posx1919\posy8010\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch AutoIt would be crippled without it.}\par}{\pard \qj\phpg\pvpg\posx1919\posy8702\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch As a first example we’re going to take a look at the}\par}{\pard \qj\phpg\pvpg\posx8291\posy8702\dfrmtxtx0\dfrmtxty0{\cf4\f0\fs30\expnd5\expndtw-1\kerning0\loch GetSystemTime}\par}{\pard \qj\phpg\pvpg\posx10263\posy8702\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch function. As you can see}\par}{\pard \qj\phpg\pvpg\posx1919\posy9136\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch the function is very straightforward, just one parameter.  However that parameter is a}\par}{\pard \qj\phpg\pvpg\posx1919\posy9571\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch pointer to a SYSTEMTIME struct. To use this struct you will have to translate it to an AutoIt}\par}{\pard \qj\phpg\pvpg\posx1919\posy10007\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch DllStruct, as you can see if you follow the link to the documentation for}\par}{\pard \qj\phpg\pvpg\posx10877\posy10007\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch SYSTEMTIME}\par}{\pard \qj\phpg\pvpg\posx12489\posy10007\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch , the}\par}{\pard \qj\phpg\pvpg\posx1919\posy10442\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch struct look like this:}\par}{\pard \qj\phpg\pvpg\posx2047\posy11273\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch typedef struct _SYSTEMTIME \{}\par}{\pard \qj\phpg\pvpg\posx2047\posy11555\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wYear;}\par}{\pard \qj\phpg\pvpg\posx2047\posy11863\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wMonth;}\par}{\pard \qj\phpg\pvpg\posx2047\posy12144\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wDayOfWeek;}\par}{\pard \qj\phpg\pvpg\posx2047\posy12425\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wDay;}\par}{\pard \qj\phpg\pvpg\posx2047\posy12733\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wHour;}\par}{\pard \qj\phpg\pvpg\posx2047\posy13014\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wMinute;}\par}{\pard \qj\phpg\pvpg\posx2047\posy13296\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wSecond;}\par}{\pard \qj\phpg\pvpg\posx2047\posy13602\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch WORD wMilliseconds;}\par}{\pard \qj\phpg\pvpg\posx2047\posy13885\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs22\expnd5\expndtw-1\kerning0\loch \} SYSTEMTIME, *PSYSTEMTIME;}\par}{\pard \qj\phpg\pvpg\posx1919\posy14562\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch The first thing you’ll probably notice is the type WORD, this type is not specified in AutoIt so}\par}{\pard \qj\phpg\pvpg\posx1919\posy14998\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch you will have find out what Microsoft means with WORD, a quick googling for “WORD}\par}{\pard \qj\phpg\pvpg\posx1919\posy15407\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch typedef” turns out that WORD is actually an unsigned 16 bit integer aka “ushort” in AutoIt}\par}{\pard \qj\phpg\pvpg\posx1919\posy15842\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch (check the help file entry for DllCall). So the complete translation of the struct (and the}\par}{\pard \qj\phpg\pvpg\posx1919\posy16278\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch simple call) is as follow:}\par}{\pard \qj\phpg\pvpg\posx2047\posy16956\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch $SYSTEMTIME=DllStructCreate("ushort wYear;ushort wMonth;ushort wDayOfWeek;ushort}\par}{\pard \qj\phpg\pvpg\posx2047\posy17340\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch wDay;ushort wHour;ushort wMinute;ushort wSecond;ushort wMilliseconds")}\par}{\pard \qj\phpg\pvpg\posx2047\posy17750\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch DllCall("Kernel32.dll","none","GetSystemTime","ptr",DllStructGetPtr($SYSTEMTIME))}\par}{\pard \qj\phpg\pvpg\posx2047\posy18133\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch MsgBox(0,"Current}\par}{\pard \qj\phpg\pvpg\posx2047\posy18543\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch time:",DllStructGetData($SYSTEMTIME,"wHour")&":"&DllStructGetData($SYSTEMTIME,"wMinut}\par}{\pard \qj\phpg\pvpg\posx2047\posy18927\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch e"))}\par}{\pard \qj\phpg\pvpg\posx6628\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | DllStructs – Hell yeah!}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 9}\par}{ \sect}\sectd \pgwsxn15225\pghsxn25920\linex0 {\pard \qj\phpg\pvpg\posx1919\posy1637\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Puh, lots of new info there, try playing around with it and when you feel like you understand}\par}{\pard \qj\phpg\pvpg\posx1919\posy2072\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch it try doing this exercise:}\par}{\pard \qj\phpg\pvpg\posx2840\posy2788\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch Change the clock of the local system to 6 pm tomorrow and then set it back to the}\par}{\pard \qj\phpg\pvpg\posx2840\posy3199\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch old time using the}\par}{\pard \qj\phpg\pvpg\posx5169\posy3199\dfrmtxtx0\dfrmtxty0{\cf3\f0\fs30\expnd5\expndtw-1\kerning0\loch SetLocalTime}\par}{\pard \qj\phpg\pvpg\posx6808\posy3199\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs30\expnd5\expndtw-1\kerning0\loch function.}\par}{\pard \qj\phpg\pvpg\posx6628\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch © Andreas Karlsson 2009 | DllStructs – Hell yeah!}\par}{\pard \qj\phpg\pvpg\posx12617\posy19695\dfrmtxtx0\dfrmtxty0{\cf1\f0\fs27\expnd5\expndtw-1\kerning0\loch 10}\par}{ \sect}}
