#include <GuiConstantsEx.au3>

Opt("TCPTimeout", 5000) ; set timeout value

Global $connect = -1, $socket = -1
Global $exit = Binary("0xFFFF"), $capture = Binary("0x0001")
Global $enc_key

TraySetToolTip("TCP Screencap Client")

$gui = GUICreate("Capture", 200, 120)
$go = GUICtrlCreateButton("Capture", 20, 20, 60, 30)
$terminate = GUICtrlCreateButton("Terminate Server", 20, 70, 100, 30)

GUISetState()
TCPStartup()

While 1
	$msg = GUIGetMsg()
	Switch $msg
		Case $GUI_EVENT_CLOSE
			_Exit()
		Case $go
			GUISetState(@SW_DISABLE, $gui)
			GUISetCursor(15, 1)
			_Capture()
			_CloseSockets()
			GUISetState(@SW_ENABLE, $gui)
			GUISetCursor()
		Case $terminate
			_TerminateServer()
			_CloseSockets()
	EndSwitch
WEnd

Func _Connect()
	Local $ret = False
	
	$connect = TCPConnect("127.0.0.1", 50000)
	If @error Then
		MsgBox(0, "Connect Error", "Error code:  " & @error)
	Else
		If _Auth() Then $ret = True
	EndIf
	
	Return $ret
EndFunc

Func _Auth()
	Local $ret = False
	Local $authfile = @ScriptDir & "\tcp_key.bin"
	If Not FileExists($authfile) Then Return False
	Local $h = FileOpen($authfile, 16) ; open binary read
	$enc_key = FileRead($h)
	FileClose($h)
	
	; encrypt key with itself
	Local $key_rc4 = _RC4($enc_key, $enc_key)
	; send encrypted key
	TCPSend($connect, $key_rc4)
	If Not @error Then
		$recv = TCPRecv($connect, 1, 1)
		If Not @error Then
			If $recv == Binary("0x01") Then
				; successfully authenticated
				$ret = True
			EndIf
		EndIf
	EndIf
	
	Return $ret
EndFunc

Func _Capture()
	Local $ret = True
	Local $recv, $hFile
	Local $md5, $md5_recv, $data
	Local $szFile = "tcp_screencap.jpg"
	
	If _Connect() Then
		; send command to capture
		TCPSend($connect, $capture)
		
		; receive encrypted data; bytes 1-16 = MD5, bytes 17-2048 = data
		$hFile = FileOpen($szFile, 2 + 16) ; open binary write
		While 1
			$recv = TCPRecv($connect, 2048, 1) ; binary receive
			If @error Then ExitLoop
			; decrypt the data, calculate its MD5
			$recv = _RC4($recv, $enc_key) ; decrypt
			$md5_recv = BinaryMid($recv, 1, 16) ; get sent MD5 (first 16 bytes)
			$data = BinaryMid($recv, 17) ; get data portion (rest)
			$md5 = _MD5($data) ; calculate data MD5
			
			If $md5 == $md5_recv Then
				FileWrite($hFile, $data) ; write
			Else
				MsgBox(0 + 48, "Error", "MD5 Error!  Aborting.")
				$ret = False
				ExitLoop
			EndIf
		WEnd
		FileClose($hFile)
		If Not $ret Then FileDelete($szFile)
	EndIf
	
	Return $ret
EndFunc

Func _TerminateServer()
	Local $ret = False
	
	If _Connect() Then
		; send exit command
		TCPSend($connect, $exit)
		$ret = True
	EndIf
	
	Return $ret
EndFunc

Func _CloseSockets()
	If $connect <> -1 Then TCPCloseSocket($connect)
	If $socket <> -1 Then TCPCloseSocket($socket)
	$connect = -1
	$socket = -1
EndFunc

; by Ward
Func _MD5($Data)
	Local	$_MD5Opcode = '0x
			$_MD5Opcode
			$_MD5Opcode &= '45F850E8510000008B4310C1E80383E03F8945F483F838730B6A38582B45F48945F0EB096A78582B45F48945F0FF75F0FF75ECFF750CE831F8FFFF6A088D45F850FF750CE823F8FFFF6A1053FF7508E8050000005BC9C210005589E55156578B7D088B750C8B4D10FCF3A45F5E595DC20C00'

	Local $CodeBuffer = DllStructCreate("byte[" & BinaryLen($_MD5Opcode) & "]")
	DllStructSetData($CodeBuffer, 1, $_MD5Opcode)

	Local $Input = DllStructCreate("byte[" & BinaryLen($Data) & "]")
	DllStructSetData($Input, 1, $Data)

	Local $Digest = DllStructCreate("byte[16]")

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer), _
													"ptr", DllStructGetPtr($Input), _
													"int", BinaryLen($Data), _
													"ptr", DllStructGetPtr($Digest), _
													"int", 0)

	Local $Ret = DllStructGetData($Digest, 1)
	$Input = 0
	$Digest = 0
	$CodeBuffer = 0
	Return $Ret
EndFunc

; by Ward
Func _RC4($Data, $Key)
	Local $Opcode = "0xC81001006A006A005356578B551031C989C84989D7F2AE484829C88945F085C00F84DC000000B90001000088C82C0188840DEFFEFFFFE2F38365F4008365FC00817DFC000100007D478B45FC31D2F775F0920345100FB6008B4DFC0FB68C0DF0FEFFFF01C80345F425FF0000008945F48B75FC8A8435F0FEFFFF8B7DF486843DF0FEFFFF888435F0FEFFFFFF45FCEBB08D9DF0FEFFFF31FF89FA39550C76638B85ECFEFFFF4025FF0000008985ECFEFFFF89D80385ECFEFFFF0FB6000385E8FEFFFF25FF0000008985E8FEFFFF89DE03B5ECFEFFFF8A0689DF03BDE8FEFFFF860788060FB60E0FB60701C181E1FF0000008A840DF0FEFFFF8B750801D6300642EB985F5E5BC9C21000"
	Local $CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]")
	DllStructSetData($CodeBuffer, 1, $Opcode)

	Local $Buffer = DllStructCreate("byte[" & BinaryLen($Data) & "]")
	DllStructSetData($Buffer, 1, $Data)

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer), _
													"ptr", DllStructGetPtr($Buffer), _
													"int", BinaryLen($Data), _
													"str", $Key, _
													"int", 0)

	Local $Ret = DllStructGetData($Buffer, 1)
	$Buffer = 0
	$CodeBuffer = 0
	Return $Ret
EndFunc

Func _Exit()
	_CloseSockets()
	TCPShutdown()
	Exit
EndFunc